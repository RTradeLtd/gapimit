// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package temporal

import (
	fmt "fmt"
	request "github.com/RTradeLtd/grpc/temporal/request"
	response "github.com/RTradeLtd/grpc/temporal/response"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x28, 0x49, 0xcd, 0x2d, 0xc8,
	0x2f, 0x4a, 0xcc, 0x91, 0x12, 0x2d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xd1, 0x87, 0xd2, 0x10,
	0x05, 0x52, 0xe2, 0x45, 0xa9, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xfa, 0x30, 0x06, 0x44, 0xc2,
	0xc8, 0x87, 0x8b, 0x2d, 0x38, 0x33, 0x3d, 0x2f, 0xb5, 0x48, 0xc8, 0x89, 0x4b, 0xc0, 0x3d, 0xb5,
	0x04, 0xcc, 0x49, 0xf1, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xd1, 0x83, 0x19, 0x03,
	0x12, 0x0f, 0x82, 0xb0, 0xa5, 0xc4, 0xf4, 0xe0, 0x86, 0x40, 0x84, 0x21, 0x1c, 0x25, 0x86, 0x24,
	0x36, 0xb0, 0xa1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x4a, 0x87, 0xb9, 0x9f, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SignerClient is the client API for Signer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SignerClient interface {
	GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error)
}

type signerClient struct {
	cc *grpc.ClientConn
}

func NewSignerClient(cc *grpc.ClientConn) SignerClient {
	return &signerClient{cc}
}

func (c *signerClient) GetSignedMessage(ctx context.Context, in *request.SignRequest, opts ...grpc.CallOption) (*response.SignResponse, error) {
	out := new(response.SignResponse)
	err := c.cc.Invoke(ctx, "/temporal.Signer/GetSignedMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignerServer is the server API for Signer service.
type SignerServer interface {
	GetSignedMessage(context.Context, *request.SignRequest) (*response.SignResponse, error)
}

func RegisterSignerServer(s *grpc.Server, srv SignerServer) {
	s.RegisterService(&_Signer_serviceDesc, srv)
}

func _Signer_GetSignedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServer).GetSignedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/temporal.Signer/GetSignedMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServer).GetSignedMessage(ctx, req.(*request.SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Signer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "temporal.Signer",
	HandlerType: (*SignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedMessage",
			Handler:    _Signer_GetSignedMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
