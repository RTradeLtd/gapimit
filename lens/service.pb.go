// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import request "github.com/RTradeLtd/grpc/lens/request"
import response "github.com/RTradeLtd/grpc/lens/response"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexerAPIClient is the client API for IndexerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexerAPIClient interface {
	// Index is used to submit content to be indexed by the lens system
	Index(ctx context.Context, in *request.Index, opts ...grpc.CallOption) (*response.Index, error)
	// Search is used to perform a configurable search against the Lens index
	Search(ctx context.Context, in *request.Search, opts ...grpc.CallOption) (*response.Results, error)
}

type indexerAPIClient struct {
	cc *grpc.ClientConn
}

func NewIndexerAPIClient(cc *grpc.ClientConn) IndexerAPIClient {
	return &indexerAPIClient{cc}
}

func (c *indexerAPIClient) Index(ctx context.Context, in *request.Index, opts ...grpc.CallOption) (*response.Index, error) {
	out := new(response.Index)
	err := c.cc.Invoke(ctx, "/IndexerAPI/Index", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerAPIClient) Search(ctx context.Context, in *request.Search, opts ...grpc.CallOption) (*response.Results, error) {
	out := new(response.Results)
	err := c.cc.Invoke(ctx, "/IndexerAPI/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexerAPIServer is the server API for IndexerAPI service.
type IndexerAPIServer interface {
	// Index is used to submit content to be indexed by the lens system
	Index(context.Context, *request.Index) (*response.Index, error)
	// Search is used to perform a configurable search against the Lens index
	Search(context.Context, *request.Search) (*response.Results, error)
}

func RegisterIndexerAPIServer(s *grpc.Server, srv IndexerAPIServer) {
	s.RegisterService(&_IndexerAPI_serviceDesc, srv)
}

func _IndexerAPI_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Index)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerAPIServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexerAPI/Index",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerAPIServer).Index(ctx, req.(*request.Index))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerAPI_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.Search)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerAPIServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IndexerAPI/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerAPIServer).Search(ctx, req.(*request.Search))
	}
	return interceptor(ctx, in, info, handler)
}

var _IndexerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IndexerAPI",
	HandlerType: (*IndexerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _IndexerAPI_Index_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _IndexerAPI_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_0d2af001fb85a632) }

var fileDescriptor_service_0d2af001fb85a632 = []byte{
	// 136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0x12, 0x2d, 0x4a, 0x2d, 0x2c, 0x4d,
	0x2d, 0x2e, 0xd1, 0x87, 0xd2, 0x50, 0x61, 0xf1, 0xa2, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54,
	0x7d, 0x18, 0x03, 0x22, 0x61, 0x94, 0xc1, 0xc5, 0xe5, 0x99, 0x97, 0x92, 0x5a, 0x91, 0x5a, 0xe4,
	0x18, 0xe0, 0x29, 0xa4, 0xc5, 0xc5, 0x0a, 0xe6, 0x09, 0xf1, 0xe9, 0xc1, 0xf4, 0x83, 0xf9, 0x52,
	0xfc, 0x7a, 0x70, 0x7d, 0x60, 0x01, 0x25, 0x06, 0x21, 0x3d, 0x2e, 0xb6, 0xe0, 0xd4, 0xc4, 0xa2,
	0xe4, 0x0c, 0x21, 0x7e, 0xb8, 0x62, 0x88, 0x80, 0x94, 0x20, 0x42, 0x75, 0x50, 0x6a, 0x71, 0x69,
	0x4e, 0x49, 0xb1, 0x12, 0x43, 0x12, 0x1b, 0xd8, 0x42, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0x0e, 0x6a, 0xec, 0xb1, 0x00, 0x00, 0x00,
}
