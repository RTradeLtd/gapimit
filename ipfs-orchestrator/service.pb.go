// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package ipfs_orchestrator

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9dfa08f491c03c5a, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type NetworkRequest struct {
	Network              string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkRequest) Reset()         { *m = NetworkRequest{} }
func (m *NetworkRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkRequest) ProtoMessage()    {}
func (*NetworkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9dfa08f491c03c5a, []int{1}
}
func (m *NetworkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkRequest.Unmarshal(m, b)
}
func (m *NetworkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkRequest.Merge(dst, src)
}
func (m *NetworkRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkRequest.Size(m)
}
func (m *NetworkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkRequest proto.InternalMessageInfo

func (m *NetworkRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

type StartNetworkResponse struct {
	Api                  string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	SwarmKey             string   `protobuf:"bytes,2,opt,name=swarm_key,json=swarmKey,proto3" json:"swarm_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartNetworkResponse) Reset()         { *m = StartNetworkResponse{} }
func (m *StartNetworkResponse) String() string { return proto.CompactTextString(m) }
func (*StartNetworkResponse) ProtoMessage()    {}
func (*StartNetworkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9dfa08f491c03c5a, []int{2}
}
func (m *StartNetworkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartNetworkResponse.Unmarshal(m, b)
}
func (m *StartNetworkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartNetworkResponse.Marshal(b, m, deterministic)
}
func (dst *StartNetworkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartNetworkResponse.Merge(dst, src)
}
func (m *StartNetworkResponse) XXX_Size() int {
	return xxx_messageInfo_StartNetworkResponse.Size(m)
}
func (m *StartNetworkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StartNetworkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StartNetworkResponse proto.InternalMessageInfo

func (m *StartNetworkResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *StartNetworkResponse) GetSwarmKey() string {
	if m != nil {
		return m.SwarmKey
	}
	return ""
}

type NetworkStatusReponse struct {
	Network              string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Api                  string   `protobuf:"bytes,2,opt,name=api,proto3" json:"api,omitempty"`
	Uptime               int64    `protobuf:"varint,3,opt,name=uptime,proto3" json:"uptime,omitempty"`
	DiskUsage            int64    `protobuf:"varint,4,opt,name=disk_usage,json=diskUsage,proto3" json:"disk_usage,omitempty"`
	Stats                []byte   `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkStatusReponse) Reset()         { *m = NetworkStatusReponse{} }
func (m *NetworkStatusReponse) String() string { return proto.CompactTextString(m) }
func (*NetworkStatusReponse) ProtoMessage()    {}
func (*NetworkStatusReponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_service_9dfa08f491c03c5a, []int{3}
}
func (m *NetworkStatusReponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkStatusReponse.Unmarshal(m, b)
}
func (m *NetworkStatusReponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkStatusReponse.Marshal(b, m, deterministic)
}
func (dst *NetworkStatusReponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkStatusReponse.Merge(dst, src)
}
func (m *NetworkStatusReponse) XXX_Size() int {
	return xxx_messageInfo_NetworkStatusReponse.Size(m)
}
func (m *NetworkStatusReponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkStatusReponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkStatusReponse proto.InternalMessageInfo

func (m *NetworkStatusReponse) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *NetworkStatusReponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *NetworkStatusReponse) GetUptime() int64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *NetworkStatusReponse) GetDiskUsage() int64 {
	if m != nil {
		return m.DiskUsage
	}
	return 0
}

func (m *NetworkStatusReponse) GetStats() []byte {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "ipfs_orchestrator.Empty")
	proto.RegisterType((*NetworkRequest)(nil), "ipfs_orchestrator.NetworkRequest")
	proto.RegisterType((*StartNetworkResponse)(nil), "ipfs_orchestrator.StartNetworkResponse")
	proto.RegisterType((*NetworkStatusReponse)(nil), "ipfs_orchestrator.NetworkStatusReponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StartNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*StartNetworkResponse, error)
	UpdateNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error)
	StopNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error)
	RemoveNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error)
	NetworkStats(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkStatusReponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StartNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*StartNetworkResponse, error) {
	out := new(StartNetworkResponse)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/StartNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) UpdateNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) StopNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/StopNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) RemoveNetwork(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/RemoveNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) NetworkStats(ctx context.Context, in *NetworkRequest, opts ...grpc.CallOption) (*NetworkStatusReponse, error) {
	out := new(NetworkStatusReponse)
	err := c.cc.Invoke(ctx, "/ipfs_orchestrator.Service/NetworkStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Ping(context.Context, *Empty) (*Empty, error)
	StartNetwork(context.Context, *NetworkRequest) (*StartNetworkResponse, error)
	UpdateNetwork(context.Context, *NetworkRequest) (*Empty, error)
	StopNetwork(context.Context, *NetworkRequest) (*Empty, error)
	RemoveNetwork(context.Context, *NetworkRequest) (*Empty, error)
	NetworkStats(context.Context, *NetworkRequest) (*NetworkStatusReponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StartNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StartNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/StartNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StartNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).UpdateNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_StopNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).StopNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/StopNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).StopNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_RemoveNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).RemoveNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/RemoveNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).RemoveNetwork(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_NetworkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).NetworkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_orchestrator.Service/NetworkStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).NetworkStats(ctx, req.(*NetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ipfs_orchestrator.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Service_Ping_Handler,
		},
		{
			MethodName: "StartNetwork",
			Handler:    _Service_StartNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Service_UpdateNetwork_Handler,
		},
		{
			MethodName: "StopNetwork",
			Handler:    _Service_StopNetwork_Handler,
		},
		{
			MethodName: "RemoveNetwork",
			Handler:    _Service_RemoveNetwork_Handler,
		},
		{
			MethodName: "NetworkStats",
			Handler:    _Service_NetworkStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_service_9dfa08f491c03c5a) }

var fileDescriptor_service_9dfa08f491c03c5a = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0x29, 0xe5, 0xcf, 0xcb, 0xbc, 0x60, 0x74, 0x43, 0xcc, 0x06, 0x63, 0x82, 0x7b, 0x91,
	0x78, 0xe0, 0xa0, 0x57, 0xaf, 0x9c, 0x34, 0xc4, 0xb4, 0xe1, 0x46, 0x42, 0x56, 0x18, 0xb1, 0x21,
	0x65, 0xd7, 0x9d, 0x29, 0x84, 0x4f, 0xe1, 0x67, 0xf5, 0x1b, 0x18, 0x5a, 0x50, 0x8c, 0xc5, 0x44,
	0xc3, 0xad, 0xf3, 0xcc, 0xf4, 0x79, 0x26, 0xbf, 0xcc, 0x42, 0x83, 0xd0, 0x2d, 0xa2, 0x31, 0x76,
	0xad, 0x33, 0x6c, 0xc4, 0x49, 0x64, 0x9f, 0x68, 0x64, 0xdc, 0xf8, 0x19, 0x89, 0x9d, 0x66, 0xe3,
	0x54, 0x15, 0xca, 0xbd, 0xd8, 0xf2, 0x4a, 0x5d, 0xc1, 0x51, 0x1f, 0x79, 0x69, 0xdc, 0x2c, 0xc0,
	0x97, 0x04, 0x89, 0x85, 0x84, 0xea, 0x3c, 0x53, 0xa4, 0xd7, 0xf6, 0x3a, 0xb5, 0x60, 0x5b, 0xaa,
	0x1e, 0x34, 0x43, 0xd6, 0x8e, 0x3f, 0x7e, 0x20, 0x6b, 0xe6, 0x84, 0xe2, 0x18, 0x7c, 0x6d, 0xa3,
	0xcd, 0xf4, 0xfa, 0x53, 0x9c, 0x41, 0x8d, 0x96, 0xda, 0xc5, 0xa3, 0x19, 0xae, 0x64, 0x31, 0xd5,
	0xff, 0xa5, 0xc2, 0x1d, 0xae, 0xd4, 0xab, 0x07, 0xcd, 0x8d, 0x45, 0xc8, 0x9a, 0x13, 0x0a, 0x30,
	0xf3, 0xd9, 0x9b, 0xbc, 0x4d, 0x28, 0x7e, 0x26, 0x9c, 0x42, 0x25, 0xb1, 0x1c, 0xc5, 0x28, 0xfd,
	0xb6, 0xd7, 0xf1, 0x83, 0x4d, 0x25, 0xce, 0x01, 0x26, 0x11, 0xcd, 0x46, 0x09, 0xe9, 0x29, 0xca,
	0x52, 0xda, 0xab, 0xad, 0x95, 0xc1, 0x5a, 0x10, 0x4d, 0x28, 0x13, 0x6b, 0x26, 0x59, 0x6e, 0x7b,
	0x9d, 0x7a, 0x90, 0x15, 0xd7, 0x6f, 0x3e, 0x54, 0xc3, 0x0c, 0x99, 0xb8, 0x85, 0xd2, 0x43, 0x34,
	0x9f, 0x0a, 0xd9, 0xfd, 0x46, 0xad, 0x9b, 0x22, 0x6b, 0xed, 0xed, 0xa8, 0x82, 0x18, 0x42, 0x7d,
	0x17, 0x91, 0xb8, 0xc8, 0x99, 0xfd, 0xca, 0xbb, 0x75, 0x99, 0x33, 0x92, 0x87, 0x59, 0x15, 0x44,
	0x1f, 0x1a, 0x03, 0x3b, 0xd1, 0x8c, 0xbf, 0xb0, 0xff, 0x69, 0xdb, 0x7b, 0xf8, 0x1f, 0xb2, 0xb1,
	0x07, 0x72, 0xeb, 0x43, 0x23, 0xc0, 0xd8, 0x2c, 0x0e, 0xb5, 0xdd, 0x10, 0xea, 0x3b, 0x67, 0x42,
	0x7f, 0x65, 0x99, 0x77, 0x6a, 0xaa, 0xf0, 0x58, 0x49, 0xdf, 0xc6, 0xcd, 0x7b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xcf, 0x7c, 0xd6, 0xf1, 0x2c, 0x03, 0x00, 0x00,
}
